[
    {
        "title": "Butler Server Project Overview",
        "content": "## Butler Server - Erlang/OTP Warehouse Automation System\n\n### Project Structure\n- **Location**: `/Users/amar.c/workspace/gm_core/butler_server_develop`\n- **Type**: Erlang multi-app umbrella project\n- **Build Tool**: Rebar3\n- **Primary Language**: Erlang/OTP\n\n### Key Applications\nThe project is organized as multiple OTP applications:\n\n1. **Core Applications**\n   - Business logic and domain models\n   - Shared utilities and libraries\n\n2. **API Applications**\n   - REST APIs\n   - WebSocket handlers\n\n3. **Worker Applications**\n   - Background job processors\n   - Event handlers\n\n### Build Commands\n```bash\n# Compile\nmake compile\n\n# Run tests\nmake test\n\n# Type checking\nmake dialyzer\n\n# Format code\nmake format\n\n# Full CI check\nmake ci\n```\n\n### Guidelines Location\n- Main instructions: `.github/copilot-instructions.md`\n- Component guidelines: `.github/instructions/`\n\n### Database\n- PostgreSQL\n- Migrations managed manually\n- Always migrate schema BEFORE code changes",
        "category": "project-configs",
        "project": "butler-server",
        "language": "erlang",
        "priority": 100,
        "tags": [
            "overview",
            "structure",
            "build"
        ]
    },
    {
        "title": "Butler Server Development Workflow",
        "content": "## Development Workflow for Butler Server\n\n### Before Starting\n1. Understand the requirement\n2. Identify affected apps/modules\n3. Check `.github/instructions/` for component guidelines\n4. Review similar implementations\n\n### Implementation Order\n1. **Database Changes**\n   - Create migration file\n   - Run migration in dev: `make db-migrate`\n   - Verify schema\n\n2. **Code Changes**\n   - Update records/types\n   - Implement business logic\n   - Add tests\n   - Run dialyzer\n\n3. **Testing**\n   - Unit tests: `rebar3 eunit`\n   - Integration tests: `rebar3 ct`\n   - Manual testing in dev environment\n\n### Validation Checklist\n- [ ] `make format` - Code formatted\n- [ ] `make dialyzer` - No type errors\n- [ ] `make test` - All tests passing\n- [ ] Database migration tested\n- [ ] API contracts unchanged (or versioned)\n\n### Common Patterns\n- Use gen_server for stateful workers\n- Use gen_statem for state machines\n- Always return `{ok, Result}` or `{error, Reason}`\n- Add comprehensive type specs\n- Log important business events",
        "category": "project-configs",
        "project": "butler-server",
        "language": "erlang",
        "priority": 99,
        "tags": [
            "workflow",
            "development",
            "process"
        ]
    },
    {
        "title": "GreyMatter Platform Project Overview",
        "content": "## GreyMatter Platform - Java/Spring Boot Multi-Module Project\n\n### Project Structure\n- **Location**: `/Users/amar.c/workspace/greymatter-platform`\n- **Type**: Maven multi-module project\n- **Java Version**: 21\n- **Framework**: Spring Boot 3.x\n\n### Module Structure\nOrganized as Maven modules:\n\n1. **Core Modules**\n   - Common utilities\n   - Shared domain models\n   - Base configurations\n\n2. **Service Modules**\n   - Microservices\n   - REST APIs\n   - Background workers\n\n3. **Integration Modules**\n   - External system connectors\n   - Message queue handlers\n\n### Build Commands\n```bash\n# Clean build\nmvn clean install\n\n# Run tests\nmvn test\n\n# Run specific module\nmvn clean install -pl :module-name\n\n# Skip tests (for local quick build)\nmvn clean install -DskipTests\n\n# Run application\nmvn spring-boot:run\n```\n\n### Database\n- PostgreSQL\n- Flyway for migrations\n- JPA/Hibernate for ORM\n- Migrations in `src/main/resources/db/migration`",
        "category": "project-configs",
        "project": "greymatter-platform",
        "language": "java",
        "priority": 100,
        "tags": [
            "overview",
            "structure",
            "maven"
        ]
    },
    {
        "title": "GreyMatter Platform Development Workflow",
        "content": "## Development Workflow for GreyMatter Platform\n\n### Before Starting\n1. Understand the requirement\n2. Identify affected modules\n3. Check existing patterns in the module\n4. Review Spring Boot best practices\n\n### Implementation Order\n1. **Database Changes (if needed)**\n   - Create Flyway migration\n   - Follow naming: `V{version}__{description}.sql`\n   - Test locally: migrations run on startup\n\n2. **Code Changes**\n   - Update entities/DTOs\n   - Implement service layer\n   - Add controller endpoints\n   - Write tests\n\n3. **Testing**\n   - Unit tests for services\n   - Integration tests for controllers\n   - Repository tests for custom queries\n   - Manual testing via Swagger/Postman\n\n### Validation Checklist\n- [ ] Code formatted (use IDE formatter)\n- [ ] `mvn compile` - No compilation errors\n- [ ] `mvn test` - All tests passing\n- [ ] Flyway migration valid\n- [ ] API documented (Swagger annotations)\n- [ ] DTOs used (not entities) in controllers\n\n### Common Patterns\n- Use `@RequiredArgsConstructor` for dependency injection\n- Return `ResponseEntity<T>` from controllers\n- Use `Optional<T>` in service layer\n- Add `@Transactional` on write operations\n- Use MapStruct for entity/DTO mapping\n- Follow RESTful conventions",
        "category": "project-configs",
        "project": "greymatter-platform",
        "language": "java",
        "priority": 99,
        "tags": [
            "workflow",
            "development",
            "spring-boot"
        ]
    }
]